'use strict';

var _actions = require('../actions');

beforeEach(function () {
  console.error = jest.fn();
  jest.useFakeTimers();
}); /* eslint-disable no-console */


afterEach(function () {
  jest.useRealTimers();
});

describe('sweetalert', function () {
  it('should create SHOW action without error', function () {
    var dispatch = jest.fn();
    var payload = { title: 'show' };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    expect(action.type).toBe(_actions.SHOW);
    expect(action.payload.title).toBe('show');
    expect(console.error).not.toBeCalled();
  });

  it('should assign title directly', function () {
    var dispatch = jest.fn();
    (0, _actions.sweetalert)('Good job!')(dispatch);
    var action = dispatch.mock.calls[0][0];
    expect(action.type).toBe(_actions.SHOW);
    expect(action.payload.title).toBe('Good job!');
    expect(console.error).not.toBeCalled();
  });

  it('should assign title, text directly', function () {
    var dispatch = jest.fn();
    (0, _actions.sweetalert)('Good job!', 'You clicked the button!')(dispatch);
    var action = dispatch.mock.calls[0][0];
    expect(action.type).toBe(_actions.SHOW);
    expect(action.payload.title).toBe('Good job!');
    expect(action.payload.text).toBe('You clicked the button!');
    expect(console.error).not.toBeCalled();
  });

  it('should assign title, text, type directly', function () {
    var dispatch = jest.fn();
    (0, _actions.sweetalert)('Good job!', 'You clicked the button!', 'success')(dispatch);
    var action = dispatch.mock.calls[0][0];
    expect(action.type).toBe(_actions.SHOW);
    expect(action.payload.title).toBe('Good job!');
    expect(action.payload.text).toBe('You clicked the button!');
    expect(action.payload.type).toBe('success');
    expect(console.error).not.toBeCalled();
  });

  it('should allow custom option in payload', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      onCancel: function onCancel() {}
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    expect(console.error).not.toBeCalled();
  });

  it('should close on confirm as default', function () {
    var dispatch = jest.fn();
    var payload = { title: 'show' };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onConfirm();
    expect(dispatch.mock.calls[1][0]).toEqual({
      type: _actions.CLOSE
    });
  });

  it('should not dispatch close when closeOnConfirm: false', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      closeOnConfirm: false
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onConfirm();
    expect(dispatch).toHaveBeenCalledTimes(1);
  });

  it('should close on cancel as default', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      showCancelButton: true
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onCancel();
    expect(dispatch.mock.calls[1][0]).toEqual({
      type: _actions.CLOSE
    });
  });

  it('should not dispatch close when closeOnCancel: false', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      showCancelButton: true,
      closeOnCancel: false
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onCancel();
    expect(dispatch).toHaveBeenCalledTimes(1);
  });

  it('should allow escape key as default', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show'
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onEscapeKey();
    expect(dispatch.mock.calls[1][0]).toEqual({
      type: _actions.CLOSE
    });
  });

  it('should not dispatch close when allowEscapeKey: false', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      allowEscapeKey: false
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onEscapeKey();
    expect(dispatch).toHaveBeenCalledTimes(1);
  });

  it('should not allow outside click as default', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show'
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onOutsideClick();
    expect(dispatch).toHaveBeenCalledTimes(1);
  });

  it('should not dispatch close when allowOutsideClick: true', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      allowOutsideClick: true
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    var action = dispatch.mock.calls[0][0];
    action.payload.onOutsideClick();
    expect(dispatch.mock.calls[1][0]).toEqual({
      type: _actions.CLOSE
    });
  });

  it('should dispatch close when timer set', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show',
      timer: 1000
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    jest.runTimersToTime(1100);
    expect(dispatch.mock.calls[1][0]).toEqual({
      type: _actions.CLOSE
    });
  });

  it('should not dispatch close when no timer option', function () {
    var dispatch = jest.fn();
    var payload = {
      title: 'show'
    };
    (0, _actions.sweetalert)(payload)(dispatch);
    jest.runAllTimers();
    expect(dispatch).toHaveBeenCalledTimes(1);
  });

  it('should warn for invalid props', function () {
    var dispatch = jest.fn();
    var payload = { titl: 'show' };
    (0, _actions.sweetalert)(payload)(dispatch);
    expect(console.error).toBeCalledWith('Warning: Property titl is invalid. You can not pass it to SweetAlert');
  });
});

describe('close', function () {
  it('should create CLOSE action', function () {
    expect((0, _actions.close)()).toEqual({
      type: _actions.CLOSE
    });
  });
});