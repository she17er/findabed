'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sweetalert = exports.closeIfShow = exports.close = exports.CLOSE = exports.SHOW = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _composeFunction = require('compose-function');

var _composeFunction2 = _interopRequireDefault(_composeFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var SHOW = exports.SHOW = '@sweetalert/SHOW';
var CLOSE = exports.CLOSE = '@sweetalert/CLOSE';

var ALLOWS_KEYS = [
// sweetalert option
'title', 'text', 'type', 'customClass', 'showCancelButton', 'showConfirmButton', 'confirmButtonText', 'confirmButtonColor', 'cancelButtonText', 'imageUrl', 'imageSize', 'html', 'animation', 'inputType', 'inputValue', 'inputPlaceholder', 'showLoaderOnConfirm', 'closeOnConfirm', 'closeOnCancel', 'allowEscapeKey', 'allowOutsideClick', 'timer',

// custom option
'onConfirm', 'onCancel', 'onClose', 'onEscapeKey', 'onOutsideClick'];

var _timeout = void 0;

var close = exports.close = function close() {
  if (_timeout) {
    clearTimeout(_timeout);
    _timeout = null;
  }
  return {
    type: CLOSE
  };
};

var closeIfShow = exports.closeIfShow = function closeIfShow() {
  if (_timeout) {
    clearTimeout(_timeout);
    _timeout = null;
  }
  return function (dispatch, getState) {
    if (getState().sweetalert.show) {
      dispatch({
        type: CLOSE
      });
    }
  };
};

function getInvalidProps(payload) {
  return Object.keys(payload).filter(function (key) {
    return ALLOWS_KEYS.indexOf(key) === -1;
  });
}

function warningInvalidProps(payload) {
  var invalidProps = getInvalidProps(payload);
  invalidProps.forEach(function (prop) {
    (0, _warning2.default)(false, 'Property ' + prop + ' is invalid. You can not pass it to SweetAlert');
  });
}

function parseArgument(f1, f2, f3) {
  if (typeof f1 === 'string') {
    var payload = {
      title: f1
    };
    if (f2) payload.text = f2;
    if (f3) payload.type = f3;
    return payload;
  }
  return f1;
}

function createCloseOnConfirmTransform(dispatch) {
  return function (_ref) {
    var closeOnConfirm = _ref.closeOnConfirm,
        payload = _objectWithoutProperties(_ref, ['closeOnConfirm']);

    return _extends({}, payload, {
      onConfirm: function onConfirm() {
        if (typeof payload.onConfirm === 'function') payload.onConfirm.apply(payload, arguments);
        if (closeOnConfirm !== false) {
          dispatch(close());
        }
      }
    });
  };
}

function createCloseOnCancelTransform(dispatch) {
  return function (_ref2) {
    var closeOnCancel = _ref2.closeOnCancel,
        payload = _objectWithoutProperties(_ref2, ['closeOnCancel']);

    return _extends({}, payload, {
      onCancel: function onCancel() {
        if (typeof payload.onCancel === 'function') payload.onCancel.apply(payload, arguments);
        if (closeOnCancel !== false) {
          dispatch(close());
        }
      }
    });
  };
}

function createAllowEscapeKeyTransform(dispatch) {
  return function (_ref3) {
    var allowEscapeKey = _ref3.allowEscapeKey,
        payload = _objectWithoutProperties(_ref3, ['allowEscapeKey']);

    return _extends({}, payload, {
      onEscapeKey: function onEscapeKey() {
        if (typeof payload.onEscapeKey === 'function') payload.onEscapeKey.apply(payload, arguments);
        if (allowEscapeKey !== false) {
          dispatch(close());
        }
      }
    });
  };
}

function createAllowOutsideClickTransform(dispatch) {
  return function (_ref4) {
    var allowOutsideClick = _ref4.allowOutsideClick,
        payload = _objectWithoutProperties(_ref4, ['allowOutsideClick']);

    return _extends({}, payload, {
      onOutsideClick: function onOutsideClick() {
        if (typeof payload.onOutsideClick === 'function') payload.onOutsideClick.apply(payload, arguments);
        if (allowOutsideClick === true) {
          dispatch(close());
        }
      }
    });
  };
}

function createTimerTransform(dispatch) {
  return function (_ref5) {
    var timer = _ref5.timer,
        payload = _objectWithoutProperties(_ref5, ['timer']);

    if (timer && typeof timer === 'number') {
      _timeout = setTimeout(function () {
        return dispatch(close());
      }, timer);
    }
    return payload;
  };
}

var sweetalert = exports.sweetalert = function sweetalert() {
  var payload = parseArgument.apply(undefined, arguments);
  warningInvalidProps(payload);
  return function (dispatch) {
    var closeOnConfirm = createCloseOnConfirmTransform(dispatch);
    var closeOnCancel = createCloseOnCancelTransform(dispatch);
    var allowEscapeKey = createAllowEscapeKeyTransform(dispatch);
    var allowOutsideClick = createAllowOutsideClickTransform(dispatch);
    var timer = createTimerTransform(dispatch);

    var transform = (0, _composeFunction2.default)(closeOnConfirm, closeOnCancel, allowEscapeKey, allowOutsideClick, timer);

    dispatch({
      type: SHOW,
      payload: transform(payload)
    });
  };
};